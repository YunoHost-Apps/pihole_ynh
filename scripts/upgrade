#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=3

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
query_logging=$(ynh_app_setting_get --app=$app --key=query_logging)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
enable_dhcp=$(ynh_app_setting_get --app=$app --key=enable_dhcp)
port=$(ynh_app_setting_get --app=$app --key=port)
pihole_version="$(ynh_app_setting_get --app=$app --key=pihole_version)"

overwrite_setupvars=$(ynh_app_setting_get --app=$app --key=overwrite_setupvars)
overwrite_ftl=$(ynh_app_setting_get --app=$app --key=overwrite_ftl)
overwrite_nginx=$(ynh_app_setting_get --app=$app --key=overwrite_nginx)
overwrite_phpfpm=$(ynh_app_setting_get --app=$app --key=overwrite_phpfpm)
admin_mail_html=$(ynh_app_setting_get --app=$app --key=admin_mail_html)
fpm_footprint=$(ynh_app_setting_get --app=$app --key=fpm_footprint)
fpm_usage=$(ynh_app_setting_get --app=$app --key=fpm_usage)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=7

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	ynh_clean_check_starting
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ACTIVATE MAINTENANCE MODE
#=================================================
ynh_script_progression --message="Activating maintenance mode..."

ynh_maintenance_mode_ON

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If overwrite_setupvars doesn't exist, create it
if [ -z "$overwrite_setupvars" ]; then
	overwrite_setupvars=1
	ynh_app_setting_set --app=$app --key=overwrite_setupvars --value=$overwrite_setupvars
fi

# If overwrite_ftl doesn't exist, create it
if [ -z "$overwrite_ftl" ]; then
	overwrite_ftl=1
	ynh_app_setting_set --app=$app --key=overwrite_ftl --value=$overwrite_ftl
fi

# If overwrite_nginx doesn't exist, create it
if [ -z "$overwrite_nginx" ]; then
	overwrite_nginx=1
	ynh_app_setting_set --app=$app --key=overwrite_nginx --value=$overwrite_nginx
fi

# If overwrite_phpfpm doesn't exist, create it
if [ -z "$overwrite_phpfpm" ]; then
	overwrite_phpfpm=1
	ynh_app_setting_set --app=$app --key=overwrite_phpfpm --value=$overwrite_phpfpm
fi

# If admin_mail_html doesn't exist, create it
if [ -z "$admin_mail_html" ]; then
	admin_mail_html=1
	ynh_app_setting_set --app=$app --key=admin_mail_html --value=$admin_mail_html
fi

# If fpm_footprint doesn't exist, create it
if [ -z "$fpm_footprint" ]; then
	fpm_footprint=low
	ynh_app_setting_set --app=$app --key=fpm_footprint --value=$fpm_footprint
fi

# If fpm_usage doesn't exist, create it
if [ -z "$fpm_usage" ]; then
	fpm_usage=low
	ynh_app_setting_set --app=$app --key=fpm_usage --value=$fpm_usage
fi

# If pihole_version doesn't exist, create it
if [ -z "$pihole_version" ]; then
	pihole_version="Last 3.X"
	ynh_app_setting_set --app=$app --key=pihole_version --value="$pihole_version"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

pihole_local_repo="/etc/.pihole"
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    ynh_script_progression --message="Upgrading source files..." --weight=4
    # Update the last version available
    ynh_setup_source --dest_dir="$pihole_local_repo" --source_id=app
    # Update admin dashboard
    ynh_setup_source --dest_dir="$final_path" --source_id=admin_dashboard
fi

chown $app:www-data "$final_path"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=6

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

# Overwrite the php-fpm configuration only if it's allowed
if [ $overwrite_phpfpm -eq 1 ]
then
	ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=3
	# Create a dedicated php-fpm config
	ynh_add_fpm_config --usage=$fpm_usage --footprint=$fpm_footprint --dedicated_service
fi

#=================================================
# NGINX CONFIGURATION
#=================================================

# Overwrite the nginx configuration only if it's allowed
if [ $overwrite_nginx -eq 1 ]
then
	ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2
	# Create a dedicated NGINX config
	ynh_add_nginx_config
fi

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE PI-HOLE SCRIPTS
#=================================================

pihole_dir="/opt/pihole"
cp -a "$pihole_local_repo/gravity.sh" "$pihole_dir/"
cp -a $pihole_local_repo/advanced/Scripts/*.sh "$pihole_dir/"

# And copy this fucking COL_TABLE file...
cp -a "$pihole_local_repo/advanced/Scripts/COL_TABLE" "$pihole_dir/"

#=================================================
# COPY PI-HOLE MAIN SCRIPT
#=================================================
ynh_script_progression --message="Copying Pi-Hole main script..."

cp -a "$pihole_local_repo/pihole" /usr/local/bin/
cp -a "$pihole_local_repo/advanced/bash-completion/pihole" /etc/bash_completion.d/pihole

#=================================================
# CREATE SUDOER FILE
#=================================================

# This sudoers config allow pihole to execute /usr/local/bin/pihole as root without password. Nothing more.
cp "$pihole_local_repo/advanced/Templates/pihole.sudo" /etc/sudoers.d/pihole
echo "$app ALL=NOPASSWD: /usr/local/bin/pihole" >> /etc/sudoers.d/pihole
chmod 0440 /etc/sudoers.d/pihole

#=================================================
# UPDATE LOGROTATE SCRIPT FOR PI-HOLE
#=================================================

pihole_storage="/etc/pihole"
cp "$pihole_local_repo/advanced/Templates/logrotate" "$pihole_storage/logrotate"
sed -i "/# su #/d;" "$pihole_storage/logrotate"

#=================================================
# UPDATE PIHOLE-FTL
#=================================================
ynh_script_progression --message="Upgrading PiHole-FTL..." --weight=35

ynh_systemd_action --action=stop --service_name=pihole-FTL

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    # Get the source of Pi-Hole-FTL
    FTL_temp_path=$(mktemp -d)
    # Install the last version available
    ynh_setup_source --dest_dir="$FTL_temp_path" --source_id=FTL

    # Instead of downloading a binary file, we're going to compile it
    ( 
        cd "$FTL_temp_path"
        ynh_exec_warn_less cmake .
        ynh_exec_warn_less make
        ynh_exec_warn_less make install
    )
    ynh_secure_remove --file="$FTL_temp_path"
fi

# Overwrite pihole-FTL config file only if it's allowed
if [ $overwrite_ftl -eq 1 ]
then
	ynh_add_config --template="../conf/pihole-FTL.conf" --destination="$pihole_storage/pihole-FTL.conf"
fi

# Last version available
# Stopped dnsmasq to replace it by pihole-FTL
ynh_systemd_action --action=stop --service_name=dnsmasq

# Disable the real dnsmasq service
#ynh_exec_warn_less systemctl disable dnsmasq --quiet

# And move the files that make the service available in systemd to really disable it
#if [ ! -e "/lib/systemd/system/.dnsmasq.service.backup_by_pihole" ]; then
#    mv /lib/systemd/system/dnsmasq.service /lib/systemd/system/.dnsmasq.service.backup_by_pihole
#fi
#if [ ! -e "/etc/init.d/.dnsmasq.backup_by_pihole" ]; then
#    mv /etc/init.d/dnsmasq /etc/init.d/.dnsmasq.backup_by_pihole
#fi

# Move dnsmasq to preserve the current binary
#if [ ! -e "/usr/sbin/dnsmasq.backup_by_pihole" ]; then
#    mv /usr/sbin/dnsmasq /usr/sbin/dnsmasq.backup_by_pihole
#fi
# Replace dnsmasq by pihole-FTL
# NOTE: pihole-FTL is actually a modified version of dnsmasq
# https://github.com/pi-hole/FTL/tree/master/dnsmasq
#ln -sf /usr/bin/pihole-FTL /usr/sbin/dnsmasq

cp -a $pihole_local_repo/advanced/Templates/pihole-FTL.service /etc/init.d/pihole-FTL
chmod +x /etc/init.d/pihole-FTL
ynh_exec_warn_less systemctl enable pihole-FTL --quiet

# Replace the service dnsmasq by pihole-FTL
# That way, YunoHost can continue to use dnsmasq by actually using pihole-FTL
#ln -sf /run/systemd/generator.late/pihole-FTL.service /etc/systemd/system/dnsmasq.service
systemctl mask dnsmasq.service

# Reload systemd config
systemctl daemon-reload

#=================================================
# BUILD VARIABLES FILE
#=================================================

setupVars="$pihole_storage/setupVars.conf"

# Overwrite the setupVars config file only if it's allowed
if [ $overwrite_setupvars -eq 1 ]
then
	# Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
	ynh_backup_if_checksum_is_different --file="$setupVars"

	# Get the default network interface
	main_iface=$(ip route | grep --max-count=1 default | awk '{print $5;}')
	echo "PIHOLE_INTERFACE=$main_iface" > $setupVars
	echo "IPV4_ADDRESS=127.0.0.1" >> $setupVars
	echo "IPV6_ADDRESS=::1" >> $setupVars
	echo "PIHOLE_DNS_1=" >> $setupVars
	echo "PIHOLE_DNS_2=" >> $setupVars
	if [ $query_logging -eq 1 ]; then
		query_logging=true
	else
		query_logging=false
	fi
	echo "QUERY_LOGGING=$query_logging" >> $setupVars
	echo "INSTALL_WEB=true" >> $setupVars

	# Recalculate and store the checksum of the file for the next upgrade.
	ynh_store_file_checksum --file="$setupVars"
fi

#=================================================
# SET VERSIONS FOR THE FOOTER OF THE WEB INTERFACE
#=================================================

echo "master master master" > $pihole_storage/localbranches
echo "$pihole_core_version $dashboard_version $FTL_version" | tee $pihole_storage/{GitHubVersions,localversions}  > /dev/null

#=================================================
# UPDATE CRON JOB
#=================================================

cp $pihole_local_repo/advanced/Templates/pihole.cron /etc/cron.d/pihole

# Remove git usage for version. Which fails because we use here a release instead of master.
ynh_replace_string --match_string=".*updatechecker.*" --replace_string="#&" --target_file=/etc/cron.d/pihole

#=================================================
# UPDATE CONF_REGEN HOOK
#=================================================
ynh_script_progression --message="Updating conf_regen hook..."

cp ../conf/dnsmasq_regenconf_hook /usr/share/yunohost/hooks/conf_regen/50-dnsmasq_$app
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="/usr/share/yunohost/hooks/conf_regen/50-dnsmasq_$app"

systemctl daemon-reload
ynh_exec_warn_less yunohost tools regen-conf dnsmasq

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add pihole-FTL --description="PiHole backend service" --log="/var/log/pihole-FTL.log" --needs_exposed_ports 53

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

ynh_systemd_action --action=restart --service_name=pihole-FTL

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --action=reload --service_name=nginx

#=================================================
# DEACTIVE MAINTENANCE MODE
#=================================================
ynh_script_progression --message="Disabling maintenance mode..." --weight=5

ynh_maintenance_mode_OFF

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

# Get main domain and buid the url of the admin panel of the app.
admin_panel="https://$(grep portal_domain /etc/ssowat/conf.json | cut -d'"' -f4)/yunohost/admin/#/apps/$app"

# If a html email is required. Apply html to the changelog.
if [ "$admin_mail_html" -eq 1 ]; then
	format=html
else
	format=plain
fi
ynh_app_changelog --format=$format

if [ $enable_dhcp -eq 1 ]
then
	dhcp_alert="You asked to use the internal DHCP server of dnsmasq with PiHole.
You should really read the documentation about that, https://github.com/YunoHost-Apps/pihole_ynh/blob/master/dhcp.md

"
else
	dhcp_alert=""
fi

echo "${dhcp_alert}You can configure this app easily by using the experimental __URL_TAG1__config-panel feature__URL_TAG2__$admin_panel/config-panel__URL_TAG3__.
You can also find some specific actions for this app by using the experimental __URL_TAG1__action feature__URL_TAG2__$admin_panel/actions__URL_TAG3__.

If you're facing an issue or want to improve this app, please open a new issue in this __URL_TAG1__project__URL_TAG2__https://github.com/YunoHost-Apps/pihole_ynh__URL_TAG3__.

---

Changelog since your last upgrade:
$(cat changelog)" > mail_to_send

ynh_send_readme_to_admin --app_message="mail_to_send" --recipients="$admin" --type=upgrade

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
